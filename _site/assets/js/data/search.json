[
  
  {
    "title": "시간복잡도",
    "url": "/posts/%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84/",
    "categories": "",
    "tags": "",
    "date": "2024-06-19 00:00:00 +0900",
    





    
    "snippet": "시간복잡도, time complexity알고리즘의 성능을 나타내는 지표로, 입력 크기에 대한 연산 횟수의 상한을 의미알고리즘 수행 시간을 측정하는 방법      절대 시간    말 그대로 시간을 측정.    그러나 실행 환경에 따라 달라질 수 있기에 실제로 활용 X        시간 복잡도    알고리즘이 시작한 순간부터 결괏값이 나올 때까지의 연산 ...",
    "content": "시간복잡도, time complexity알고리즘의 성능을 나타내는 지표로, 입력 크기에 대한 연산 횟수의 상한을 의미알고리즘 수행 시간을 측정하는 방법      절대 시간    말 그대로 시간을 측정.    그러나 실행 환경에 따라 달라질 수 있기에 실제로 활용 X        시간 복잡도    알고리즘이 시작한 순간부터 결괏값이 나올 때까지의 연산 횟수    최선, 평균, 최악의 경우로 나눔 (Best, Normal, Worst)    코테는 모든 경우의 수에서 테케를 성공해야하기에 최악의 경우를 가정  Big-O 표기법점근적 표기법, 어떤 함수의 증가하는 추세를 표현하는 표기법.ex) 2x^2 + 3x + 5 ⇒ O(x^2)우선순위는 지수함수 &gt; 다항함수 &gt; 로그함수시간복잡도 → 코테?일반적으로 1초의 1억 번의 연산을 가정.출제자의 의도라면 넉넉잡아 1,000만 ~ 3,000만을 고려해 시간 복잡도 생각하면 됨.외우면 편한 것sort() → O(nlogn)이진탐색 → O(logn)Heap(priority queue) : push(), pop() → O(logn)Java 실행시간 측정 코드long beforeTime = System.currentTimeMillis(); // 코드 실행 전 시간        // 코드        long afterTime = System.currentTimeMillis(); // 코드 실행 후 시간 long secDiffTime = (afterTime - beforeTime)/1000; // 두 시간 차 계산System.out.println(\"실행 시간(m): \"+secDiffTime);자료구조에 따른 시간 복잡도      배열의 접근성    인덱스만 알고 있다면 빠른 조회 가능. 그러나 검색, 삽입, 삭제는…        스택, 큐, 연결리스트의 삽입 / 삭제    주소를 참조하고 있기에 빠른 삽입, 손절 가능. 그러나 조회, 검색은…        해시 테이블의 검색 / 삽입 / 삭제    평균적으로 O(1)로 검색, 삽입, 삭제 가능. 그러나 최악의 경우엔 O(n) 걸림(해시 충돌)        이진탐색 트리의 O(log(n)) 조회 / 검색 / 삽입 / 삭제    평균적으로 O(log(n)) 조회, 검색, 삽입, 삭제 가능. 단 균형 잡힌 트리여야 함.    중위 순회를 통해 O(n)으로 정렬된 데이터를 얻을 수 있음    최소값, 최대값, 전위, 후위, 중위 순회등 다양한 트리 연산 지원.    특정 범위의 값을 효율적으로 탐색 가능. 이는 해시 테이블에 비해 큰 이점.    최악의 경우(트리가 한 쪽으로 치우친) O(n)…. → AVL트리, 레드블랙 트리로 해결  각 정렬 알고리즘 별 시간복잡도"
  },
  
  {
    "title": "코테 기본기 복습",
    "url": "/posts/%EC%BD%94%ED%85%8C-%EA%B8%B0%EB%B3%B8%EA%B8%B0-%EB%B3%B5%EC%8A%B5/",
    "categories": "코딩테스트",
    "tags": "",
    "date": "2024-06-16 17:24:00 +0900",
    





    
    "snippet": "Java 입출력import java.io.*;import java.util.*;public class StandardIO {    public static void main(String[] args) throws IOException {            // BufferedReader 선언\t\t    BufferedReader br = new Buf...",
    "content": "Java 입출력import java.io.*;import java.util.*;public class StandardIO {    public static void main(String[] args) throws IOException {            // BufferedReader 선언\t\t    BufferedReader br = new BufferedReader(new InputStringReader(System.in));\t\t    StirngTokenizer st = new StringTokenizer(br.readLine());\t\t    StringBuilder sb = new StringBuilder();\t\t    \t\t    // 한 줄 통째로 가져오기\t\t    String s = br.readLine();\t\t    int i = Integer.parseInt(br.readLine());\t\t    \t\t    // StringTokenizer로 공백 단위로 가져오기\t\t    st = new StringTokenizer(br.readLine());\t\t    int N = Integer.parseInt(st.nextToken());\t\t    \t\t    // StringBuilder에 넣기\t\t    sb.append(s);\t\t    \t\t    // 출력\t\t    System.out.println(sb);\t\t    System.out.printf(%s, sb.toString());\t\t    System.out.print(sb);\t\t        }}백준 풀 때는 IntelliJ IDE로 풀고기본 입출력 코드는 복붙하고 시작했다.그러다 보니 막상 실제 코테 환경에서 throws IOException을 빼먹어서아무것도 못하는 사태 발생.그런 의미에서 입출력 코드부터 손코딩하고 시작."
  },
  
  {
    "title": "깃허브 블로그 시작",
    "url": "/posts/%EA%B9%83%ED%97%88%EB%B8%8C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%8B%9C%EC%9E%91/",
    "categories": "Github",
    "tags": "",
    "date": "2024-03-10 00:00:00 +0900",
    





    
    "snippet": "깃허브 블로그를 시작하는 이유네이버 블로그에 Flutter 관련 개발 작성-&gt; 일상글과 분리하리 위해 Velog 개설Velog의 중구난방의 글과 일정하지 못한 카테고리, 카테고리 설정-&gt; 카테코리, 태그 정리와 커스텀 설정을 위해 깃허브 블로그 이주앞으로의 계획  현재 진행중인 생선가게 백엔드 진행 과정 기록  삼성 B형 역량테스트 대비 알...",
    "content": "깃허브 블로그를 시작하는 이유네이버 블로그에 Flutter 관련 개발 작성-&gt; 일상글과 분리하리 위해 Velog 개설Velog의 중구난방의 글과 일정하지 못한 카테고리, 카테고리 설정-&gt; 카테코리, 태그 정리와 커스텀 설정을 위해 깃허브 블로그 이주앞으로의 계획  현재 진행중인 생선가게 백엔드 진행 과정 기록  삼성 B형 역량테스트 대비 알고리즘 풀이 기록  이전 프로젝트 및 토이 프로젝트 정리해서 기록"
  }
  
]

