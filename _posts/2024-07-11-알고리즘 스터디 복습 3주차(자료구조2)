---
title: 알고리즘 스터디 복습 3주차(자료구조2)
date: 2024-07-11 22:40:00 +09:00
categories: [코딩테스트]
tags:
  [자료구조]
---

## 문제 : [나는야 포켓몬 마스터 이다솜](https://www.acmicpc.net/problem/1620)

### 번호 : 1620

### 난이도 : S4

```jsx
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());

        Map<Integer, String> pokemon = new HashMap<>();
        Map<String,Integer> pokemonR = new HashMap<>();

        for(int i=0;i<N;i++){
            st = new StringTokenizer(br.readLine());
            String s = st.nextToken();
            pokemon.put(i,s);
            pokemonR.put(s,i);
        }

        for(int i=0;i<M;i++){
            st = new StringTokenizer(br.readLine());
            String s = st.nextToken();
            char c = s.charAt(0);
            if((c>='a'&&c<='z')||(c>='A'&&c<='Z')){
                System.out.println(pokemonR.get(s)+1);
            } else{
                System.out.println(pokemon.get(Integer.parseInt(s)-1));
            }
        }
        //entry로
    }
}

// 해시 맵 두 개 사용 각각 저장.
```

```jsx
/* GPT CODE */
import java.util.HashMap;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // 포켓몬 수와 질문 수 입력
        int N = sc.nextInt();
        int M = sc.nextInt();
        sc.nextLine(); // 버퍼 비우기

        // 포켓몬 이름을 번호로 매핑하는 HashMap
        HashMap<String, Integer> nameToNumber = new HashMap<>();
        // 포켓몬 번호를 이름으로 매핑하는 HashMap
        String[] numberToName = new String[N + 1];

        // 포켓몬 이름과 번호 입력
        for (int i = 1; i <= N; i++) {
            String name = sc.nextLine();
            nameToNumber.put(name, i);
            numberToName[i] = name;
        }

        // 질문 처리
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < M; i++) {
            String query = sc.nextLine();
            if (isNumeric(query)) {
                // 번호로 질문한 경우
                int number = Integer.parseInt(query);
                sb.append(numberToName[number]).append('\n');
            } else {
                // 이름으로 질문한 경우
                sb.append(nameToNumber.get(query)).append('\n');
            }
        }

        // 결과 출력
        System.out.print(sb);
    }

    // 주어진 문자열이 숫자인지 확인하는 함수
    private static boolean isNumeric(String str) {
        try {
            Integer.parseInt(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
}

// 해시맵 하나에 이름을 키로 번호를 밸류로.
// 이름은 따로 List에 저장해 번호(index)를 넣으면 이름이 나오게.
// try catch로 숫자 확인하는 함수

// 근데 메모리랑 시간 더 많이 걸리는데..? GPT야
```

---

## 문제 : [문자열 집합](https://www.acmicpc.net/problem/14425)

### 번호 : 14425

### 난이도 : S4

```jsx
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());

        Set<String> S = new HashSet<String>();
        ArrayList check = new ArrayList();

        for(int i=0;i<N;i++){
            st = new StringTokenizer(br.readLine());
            S.add(st.nextToken());
        }
        for(int i=0;i<M;i++){
            st = new StringTokenizer(br.readLine());
            check.add(st.nextToken());
        }
        check.retainAll(S);
        System.out.println(check.size());
    }
}

// HashSet 사용
// A.retainAll(B) 함수를 이용하여 A에서 A,B의 공통요소만 남기고 제거
// 즉 A-B
```

```jsx
/* GPT CODE */
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashSet;
import java.util.Set;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        // 입력을 효율적으로 처리하기 위해 BufferedReader 사용
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        // 첫 번째 줄에서 N과 M 값을 읽어옴
        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());

        // 집합 S를 HashSet으로 생성
        Set<String> S = new HashSet<>();

        // N개의 문자열을 집합 S에 추가
        for (int i = 0; i < N; i++) {
            S.add(br.readLine());
        }

        int count = 0;

        // M개의 문자열을 검사하여 집합 S에 포함된 문자열 수를 셈
        for (int i = 0; i < M; i++) {
            if (S.contains(br.readLine())) {
                count++;
            }
        }

        // 결과 출력
        System.out.println(count);
    }
}

// .contains()를 사용하여 일일히 확인
```

---

## 문제 : [최대 힙](https://www.acmicpc.net/problem/11279)

### 번호 : 11279

### 난이도 : S2

```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Collection;
import java.util.Collections;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        int N = Integer.parseInt(st.nextToken());
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(Collections.reverseOrder());

        for(int i=0;i<N;i++){
            st = new StringTokenizer(br.readLine());
            int tmp = Integer.parseInt(st.nextToken());
            if(tmp ==0){
                if(pq.isEmpty()){
                    System.out.println('0');
                } else{
                    System.out.println(pq.remove());
                }
            } else{
                pq.add(tmp);
            }
        }
    }
}

// Priority Queue를 이용하여 밸류가 높은 값 부터 빼기
// new PriorityQueue<Integer>(Collections.reverseOrder())로 내림차순으로
```

```java
/* GPT CODE */
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Collections;
import java.util.PriorityQueue;

public class Main {
    public static void main(String[] args) throws IOException {
        // 입력을 효율적으로 처리하기 위해 BufferedReader 사용
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        // 첫 번째 줄에서 연산의 개수 N 값을 읽어옴
        int N = Integer.parseInt(br.readLine());

        // 최대 힙을 구현하기 위해 PriorityQueue를 역순으로 초기화
        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());

        // N번의 연산 처리
        for (int i = 0; i < N; i++) {
            // 각 연산의 정수 x를 읽어옴
            int x = Integer.parseInt(br.readLine());

            if (x == 0) {
                // x가 0인 경우 최대 힙에서 가장 큰 값을 출력하고 제거
                if (pq.isEmpty()) {
                    System.out.println(0);
                } else {
                    System.out.println(pq.poll());
                }
            } else {
                // x가 자연수인 경우 최대 힙에 추가
                pq.add(x);
            }
        }
    }
}
```

---

## 문제 : [N번째 큰 수](https://www.acmicpc.net/problem/2075)

### 번호 : 2075

### 난이도 : S2

```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        int N = Integer.parseInt(st.nextToken());
        int[][] arr = new int[N][N];
        int[] arrIdx = new int[N];

        for(int i=0;i<N;i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0;j<N;j++){
                arr[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        int max = -1_000_000_000;
        for(int i=0;i<N;i++){
            max = -1_000_000_000;
            int maxIdx = 0;
            for(int j=0;j<N;j++){
                int tmp = arr[N-1-arrIdx[j]][j];
                if(tmp>max){
                    max = tmp;
                    maxIdx = j;
                }
            }
            arrIdx[maxIdx]++;
        }
        System.out.println(max);
    }
}

// 전체 조사 필요 X, 처음엔 가장 아랫 줄 5개 비교.
// 그 다음엔 첫 번째 수 위와 나머지 가장 아랫 줄 4개 비교
// 반복
// arrIdx[]에는 해당 열의 선택 숫자 기록.

```

```java
/* GPT CODE */
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());

        PriorityQueue<Integer> minHeap = new PriorityQueue<>(N);

        for (int i = 0; i < N; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            for (int j = 0; j < N; j++) {
                int num = Integer.parseInt(st.nextToken());
                if (minHeap.size() < N) {
                    minHeap.offer(num);
                } else if (num > minHeap.peek()) {
                    minHeap.poll();
                    minHeap.offer(num);
                }
            }
        }

        // N번째로 큰 수는 최소 힙의 루트 요소입니다.
        System.out.println(minHeap.peek());
    }
}

// 최소 힙 이용.
// 읽기부터 아예 계속 N개로 힙을 유지하면서 넣고 빼고 하면 OK.
```

---

## 문제 : [생태학](https://www.acmicpc.net/problem/4358)

### 번호 : 4358

### 난이도 : S2

```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        Map<String,Integer> tree = new HashMap<String,Integer>();
        String s = "";

        int cnt = 0;
        while((s = br.readLine())!=null){
            if(tree.containsKey(s)){
                int tmp = tree.remove(s);
                tree.put(s,tmp+1);
            } else{
                tree.put(s,1);
            }
            cnt++;
        }
        ArrayList<String> al = new ArrayList(tree.keySet());
        Collections.sort(al);
        for(String treeName : al){
            System.out.printf("%s %.4f\n",treeName,(double)tree.get(treeName)/cnt*100);
        }
    }
}

// HashMap 사용.
// while((s = br.readLine())!=null) 을 통해 null 입력 받을 때 까지 반복
// 이미 있는 나무이면 지우고 하나 큰 수 삽입, 처음 보는 나무는 1로 입력
// HashMap.keySet()로 리스트로 변환 후 Collections.sort 정렬
// %.4f로 소수 넷째 자리까지 반올림 후 출력
```

```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {
    public static void main(String[] args) throws IOException {
        // BufferedReader를 사용하여 입력을 효율적으로 처리
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        // 나무 종의 이름과 빈도를 저장하기 위한 HashMap 초기화
        Map<String, Integer> treeCountMap = new HashMap<>();
        String treeName;
        int totalTrees = 0;  // 전체 나무의 수를 저장할 변수

        // 입력을 한 줄씩 읽으면서 처리
        while ((treeName = br.readLine()) != null && !treeName.isEmpty()) {
            // 현재 읽은 나무 종 이름의 빈도를 증가
            treeCountMap.put(treeName, treeCountMap.getOrDefault(treeName, 0) + 1);
            totalTrees++;  // 전체 나무의 수 증가
        }

        // HashMap의 키(나무 이름)를 리스트로 변환하여 사전 순으로 정렬
        List<String> treeNames = new ArrayList<>(treeCountMap.keySet());
        Collections.sort(treeNames);

        // 결과 출력을 위한 StringBuilder 초기화
        StringBuilder sb = new StringBuilder();

        // 각 나무 종의 이름과 비율을 계산하여 결과 문자열에 추가
        for (String name : treeNames) {
            double percentage = (treeCountMap.get(name) / (double) totalTrees) * 100;
            sb.append(String.format("%s %.4f\n", name, percentage));
        }

        // 최종 결과 출력
        System.out.print(sb.toString());
    }
}

// HashMap 사용
// treeCountMap.put(treeName, treeCountMap.getOrDefault(treeName, 0) + 1);
// .getOrDefault(treeName, 0)을 통해 한 줄로 처리
```

---

## 문제 : [절대값 힙](https://www.acmicpc.net/problem/11286)

### 번호 : 11286

### 난이도 : S1

```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        int N = Integer.parseInt(st.nextToken());
        PriorityQueue<Integer> pqPlus = new PriorityQueue();
        PriorityQueue<Integer> pqMinus = new PriorityQueue();

        for(int i=0;i<N;i++){
              int x = Integer.parseInt(br.readLine());
              if(x>0){
                  pqPlus.add(x);
              } else if ( x< 0){
                  pqMinus.add(-x);
              } else{
                  if(pqPlus.isEmpty()&& pqMinus.isEmpty()){
                      System.out.println(0);
                      continue;
                  } else if(pqMinus.isEmpty()){
                      System.out.println(pqPlus.remove());
                      continue;
                  } else if(pqPlus.isEmpty()){
                      System.out.println(pqMinus.remove()*-1);
                      continue;
                  }
                  int minPlus = pqPlus.peek();
                  int minMinus = pqMinus.peek();
                  if(minMinus<=minPlus){
                      System.out.println(pqMinus.remove()*-1);
                  } else{
                      System.out.println(pqPlus.remove());
                  }
              }
        }
    }
}
// Priority Queue를 양수, 음수 2개를 만들고 각각 맞게 집어넣기
// 둘 다 비어있으면 땡!
// 한 쪽이 비어있으면 다른 쪽 빼기
// 둘 다 비어있지 않으면 양 쪽 peek해서 절대 값 작은 쪽 빼기
```

```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Comparator;
import java.util.PriorityQueue;

public class Main {
    public static void main(String[] args) throws IOException {
        // 입력을 처리하기 위한 BufferedReader 초기화
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        // 첫 줄에서 연산의 개수 N을 읽어옴
        int N = Integer.parseInt(br.readLine());

        // 커스텀 비교기를 사용하여 PriorityQueue 초기화
        PriorityQueue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                // 절댓값이 작은 순서로 정렬, 절댓값이 같으면 실제 값이 작은 순서로 정렬
                int abs1 = Math.abs(o1);
                int abs2 = Math.abs(o2);
                if (abs1 == abs2) {
                    return o1 - o2; // 절댓값이 같으면 실제 값 비교
                }
                return abs1 - abs2; // 절댓값 비교
            }
        });

        // N번의 연산을 처리
        for (int i = 0; i < N; i++) {
            int x = Integer.parseInt(br.readLine());
            if (x != 0) {
                // x가 0이 아니면 힙에 추가
                pq.offer(x);
            } else {
                // x가 0이면 힙에서 절댓값이 가장 작은 값을 출력하고 제거
                if (pq.isEmpty()) {
                    System.out.println(0);
                } else {
                    System.out.println(pq.poll());
                }
            }
        }
    }
}

// Comparator로 직접 정렬 기준 세우기.
// 이러면 하나의 우선순위 큐로 해결 가능
// 커스텀 정렬 기준 세우는 거 따로 학습 필요. 예전에도 외우려고 했는데 쉽지 않음.
```

---

## 회고

HashMap, HashSet 과 PriorityQueue에 대한 문제들.

해시와 우선순위 큐 모두 연습이 필요.

특히 우선순위 큐에서 정렬 기준을 다채롭게 설정하는 코드 숙지 필요 함.